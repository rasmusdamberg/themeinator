/*------------------------------------*\
  #Mixins
\*------------------------------------*/

/**
 * This file contains some basic mixins to provide with some helper methods
 * to ease things up a bit.
 */



 /*------------------------------------*\
   #Breakpoints mixin
 \*------------------------------------*/

  /**
  * Mixin for breakpoints/media-queries
  */

  /// Responsive breakpoint manager
  /// @access public
  /// @param {String} $breakpoint - Breakpoint
  /// @requires $breakpoints
  @mixin respond-to($breakpoint) {
    $raw-query: map-get($breakpoints, $breakpoint);

    @if $raw-query {
      $query: if(
        type-of($raw-query) == 'string',
        unquote($raw-query),
        inspect($raw-query)
      );

      @media #{$query} {
        @content;
      }
    } @else {
      @error 'No value found for `#{$breakpoint}`. '
           + 'Please make sure it is defined in `$breakpoints` map.';
    }
  }





/*------------------------------------*\
  #Text-truncate
\*------------------------------------*/

 /**
 * Requires inline-block or block for proper styling
 * Compatibility untested.
 */

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}




/*------------------------------------*\
  #Clearfix
\*------------------------------------*/

/**
 * Clear floating elements within a container to prevent odd rendering
 * Compatibility untested.
 */

@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}




/*------------------------------------*\
  #CSS-triangle
\*------------------------------------*/

/**
 * We use this to create isosceles triangles
 * $triangle-size - Used to set border-size. No default, set a px or em size.
 * $triangle-color - Used to set border-color which makes up triangle. No default
 * $triangle-direction - Used to determine which direction triangle points.
 * Options: top, bottom, left, right
 */

@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  border: inset $triangle-size;
  content: "";
  display: block;
  height: 0;
  width: 0;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}





/*------------------------------------*\
  #Button-background
\*------------------------------------*/

/**
 * Mixin for consistent buttons
 */

 @mixin button-bg($bg) {
  background: $bg;
  &:hover {
    background: darken($bg,8%);
    transition: all 0.3s ease;
  }
  &:active {
    background: darken($bg,25%);
  }
}





/*------------------------------------*\
  #Circle
\*------------------------------------*/

/**
 * Use this mixin to create a circle
 */

@mixin circle($width) {
  width: $width;
  height: $width;
  -webkit-border-radius: $width/2;
     -moz-border-radius: $width/2;
          border-radius: $width/2;
}





/*------------------------------------*\
  #Center-elements
\*------------------------------------*/

/**
 * Center element horizontal and vertical
 *
 * Mixin for centering child elements vertical and horizontal
 * Remember to add 'position: relative' to parent element
 */

$varCenter: 50%;

@mixin centerElemHV() {
  position: absolute;
  top: $varCenter;
  left: $varCenter;
  transform: translate(-$varCenter, -$varCenter);
}


/**
 * Center element vertical
 *
 * Mixin for centering child elements vertial
 * Remember to add 'position: relative' to parent element
 */

@mixin centerElemV() {
  position: absolute;
  top: $varCenter;
  transform: translateY(-$varCenter);
}
